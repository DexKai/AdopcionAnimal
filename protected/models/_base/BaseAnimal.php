<?php

/**
 * This is the model base class for the table "animal".
 * DO NOT MODIFY THIS FILE! It is automatically generated by AweCrud.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Animal".
 *
 * Columns in table "animal" available as properties of the model,
 * followed by relations of table "animal" available as properties of the model.
 *
 * @property integer $id_animal
 * @property integer $id_especie
 * @property string $RUT
 * @property integer $numero_chip
 * @property string $nombre_animal
 * @property integer $edad_animal
 * @property string $genero_animal
 * @property double $peso
 * @property string $vacunas
 * @property string $desparasitado
 * @property string $estirilizado
 * @property string $observaciones
 * @property string $image
 * @property string $fecha_adopcion
 *
 * @property Persona $rUT
 * @property Especie $idEspecie
 */
abstract class BaseAnimal extends AweActiveRecord {

    public static function model($className=__CLASS__) {
        return parent::model($className);
    }

    public function tableName() {
        return 'animal';
    }

    public static function representingColumn() {
        return 'nombre_animal';
    }

    public function rules() {
        return array(
            array('id_especie, RUT, numero_chip, nombre_animal, genero_animal, fecha_adopcion', 'required'),
            array('id_especie, numero_chip, edad_animal', 'numerical', 'integerOnly'=>true),
            array('peso', 'numerical'),
            array('RUT', 'length', 'max'=>12),
            array('nombre_animal', 'length', 'max'=>20),
            array('genero_animal, image', 'length', 'max'=>1024),
            array('vacunas, desparasitado, estirilizado, observaciones', 'safe'),
            array('edad_animal, peso, vacunas, desparasitado, estirilizado, observaciones, image', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id_animal, id_especie, RUT, numero_chip, nombre_animal, edad_animal, genero_animal, peso, vacunas, desparasitado, estirilizado, observaciones, image, fecha_adopcion', 'safe', 'on'=>'search'),
        );
    }

    public function relations() {
        return array(
            'rUT' => array(self::BELONGS_TO, 'Persona', 'RUT'),
            'idEspecie' => array(self::BELONGS_TO, 'Especie', 'id_especie'),
        );
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels() {
        return array(
                'id_animal' => Yii::t('app', 'Id Animal'),
                'id_especie' => Yii::t('app', 'Id Especie'),
                'RUT' => Yii::t('app', 'Rut'),
                'numero_chip' => Yii::t('app', 'Numero Chip'),
                'nombre_animal' => Yii::t('app', 'Nombre Animal'),
                'edad_animal' => Yii::t('app', 'Edad Animal'),
                'genero_animal' => Yii::t('app', 'Genero Animal'),
                'peso' => Yii::t('app', 'Peso'),
                'vacunas' => Yii::t('app', 'Vacunas'),
                'desparasitado' => Yii::t('app', 'Desparasitado'),
                'estirilizado' => Yii::t('app', 'Estirilizado'),
                'observaciones' => Yii::t('app', 'Observaciones'),
                'image' => Yii::t('app', 'Image'),
                'fecha_adopcion' => Yii::t('app', 'Fecha Adopcion'),
                'rUT' => null,
                'idEspecie' => null,
        );
    }

    public function search() {
        $criteria = new CDbCriteria;

        $criteria->compare('id_animal', $this->id_animal);
        $criteria->compare('id_especie', $this->id_especie);
        $criteria->compare('RUT', $this->RUT);
        $criteria->compare('numero_chip', $this->numero_chip);
        $criteria->compare('nombre_animal', $this->nombre_animal, true);
        $criteria->compare('edad_animal', $this->edad_animal);
        $criteria->compare('genero_animal', $this->genero_animal, true);
        $criteria->compare('peso', $this->peso);
        $criteria->compare('vacunas', $this->vacunas, true);
        $criteria->compare('desparasitado', $this->desparasitado, true);
        $criteria->compare('estirilizado', $this->estirilizado, true);
        $criteria->compare('observaciones', $this->observaciones, true);
        $criteria->compare('image', $this->image, true);
        $criteria->compare('fecha_adopcion', $this->fecha_adopcion, true);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }

    public function behaviors() {
        return array_merge(array(
        ), parent::behaviors());
    }
}